#########################################################
#Tommy's suggestion for the language
#
#Data types:
#string
#	- Represents a string of letters
#	- is a "basic" data type
#int
#	- Represents a number
#	- is a "basic" data type
#piece 
#	- Represents a piece or a card
#	- Consists of a value(string) and an owner(string)
#area
#	- Represents an area on the playing "board"
#	- Consists of an array of pieces
#rule
#	- Represents a rule in the game
#	- Can for example be used to represent: setup rule, playing rule, winning rule
#	- Consists of an expression(string)
#player
#	- Represents a player in the game
#	- Consists of a name, an array of areas
#
#Control flow statements:
#	- while, for, if-elseif-else
#
#
########################################################

##################
#
#Who has the biggest card
#
##################

##
#Setup the different areas of the board
##
area player1deck;
area player1points;
area player2deck;
area player2points;
area battlefield;
area battledraw;
area[] areas = {player1deck,player1points,player2deck,player2points,battlefield,battledraw};
##
#Setup number of players in the game
##
player[2] players;  

##
#Define player name and what areas "belong" to them
##
players[0].name = "Kurt"; #needs to be unique	
players[0].areas = {player1deck,player1points};

players[1].name = "Kaj"; #needs to be unique
players[1].areas = {player2deck,player2points};

##
#Setup the pieces of this game(in this case cards)
##
piece[52] deck;
string[] suits = {"♠","♣","♦","♥"};
int[] numbers = {1,2,3,4,5,6,7,8,9,10,11,12,13};
for (int i = 0; i < 52; i++)
{
	deck[i].value = suits[i/13]+numbers[i%13]; #Ints will have to floor in order for i/13 to work
}
shuffleDeck(deck); #A library function that shuffles the deck(there are algorithms that do that:)


##
#Define setup(start) rules of the game
##
rule splitcards;
splitcards.expression = "split deck between player1deck,player2deck"; #A string representation of the desired rule(also sets the owner of the cards) 										(might be too much work this way, could be expressed as functions instead?)
rule[] setuprules = {splitcards};

##
#Define rules of play
##
rule playcards;
playcards.expression = "put first piece from player1deck,player2deck to battlefield";
rule evalbattle;
evalbattle.expression = "evaluate battlefield piece.value winner is highest if winner do move winner to piece.owner.areas[2] if draw do move all to battledraw"
rule[] rulesofplay = {playcards,evalbattle}; #rules are executed in order


##
#Define winner conditions
##
rule emptydecks;
emptydecks.expression = "if player1deck,player2deck is empty do end is true";
rule winner;
winner.expression = "if end is true do winner is owner of highest player1points.count,player2points.count";
rule[] winnerconditions = {emptydecks,winner}; #rules are executed in order

Play(areas,players,setuprules,rulesofplay,winnerconditions); #plays the game with the given parameters




#################
#
#Fish
#
#################


##
#Define areas
##
area player1hand;
area player1books; #books = stik på dansk
area player2hand;
area player2books;
area pool;
area[] areas = {player1hand,player1books,player2hand,player2books,pool};

##
#Define players
##
player[2] players;

players[0].name = "Kurt";
players[0].areas = {player1hand,player1books};

players[0].name = "Kaj";
players[0].areas = {player2hand,player2books};


##
#Setup the pieces of this game(in this case cards)
##
piece[52] deck;
string[] suits = {"♠","♣","♦","♥"};
int[] numbers = {1,2,3,4,5,6,7,8,9,10,11,12,13};
for (int i = 0; i < 52; i++)
{
	deck[i].value = suits[i/13]+numbers[i%13]; #Ints will have to floor in order for i/13 to work
}
shuffleDeck(deck); #A library function that shuffles the deck(there are algorithms that do that:)


##
#Define setup rules
##
rule movetopool;
movetopool.expression = "move deck to pool";
rule drawseven;
drawseven.expression = "move 7 pieces from pool to player1hand,player2hand";
rule[] setuprules = {movetopool,drawseven};

##
#Define rules of play
##
rule[] rulesofplay = {};

##
#Define winning conditions
##
rule emptyboard;
emptyboard.expression = "if pool,player1hand,player2hand is empty then end is true";
rule winner;
winner.expression = "if end is true winner is owner of highest player1books.count,player2books.count";
rule[] winningconditions = {emptyboard,winner};

Play(areas,players,setuprules,rulesofplay,winningconditions); #plays the game with the given parameters




